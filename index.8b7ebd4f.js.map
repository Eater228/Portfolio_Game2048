{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAgB,SAAS,aAAa,CAAC,gBACvC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAc,SAAS,aAAa,CAAC,WACrC,EAAY,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,eAGnD,EAAQ,EACR,EAAQ,IAEZ,SAAS,IACP,OAAO,MAAM,IAAI,CAAC,CAAE,OALT,CAKsB,EAC/B,WAAM,MAAA,MAAM,CAAM,IAAI,CAAC,E,EAC3B,CAEA,SAAS,IAGP,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAM,EAAG,EAZP,EAYmB,IAC5B,IAAK,IAAI,EAAO,EAAG,EAbV,EAauB,IACL,IAArB,CAAK,CAAC,EAAI,CAAC,EAAK,EAClB,EAAW,IAAI,CAAC,CACd,IAAA,EAAK,KAAA,CACP,GAKN,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EACF,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CAEvD,EAAQ,KAAK,MAAM,GAAK,GAAM,EAAI,CAExC,CAAA,CAAK,CAAC,EAAW,GAAG,CAAC,CAAC,EAAW,IAAI,CAAC,CAAG,CAC3C,CACF,CA2CA,SAAS,EAAc,CAAG,EACxB,OAAO,CAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAC,CAAA,CAAG,CAAtB,EAA4B,OAAA,EAAI,GAAG,CAAC,SAAA,CAAR,EAAe,OAAA,CAAG,CAAC,EAAE,A,E,EACnD,CAEA,SAAS,EAAU,CAAG,EAGpB,IAAK,IAFC,EAAmB,EAAI,MAAM,CAAC,SAAA,CAApC,EAA6C,OAAA,AAAU,IAAV,C,GAEpC,EAAI,EAAG,EAAI,EAAiB,MAAM,CAAG,EAAG,IAC3C,CAAgB,CAAC,EAAE,GAAK,CAAgB,CAAC,EAAI,EAAE,GACjD,CAAgB,CAAC,EAAE,EAAI,EACvB,GAAS,CAAgB,CAAC,EAAE,CAC5B,EAAiB,MAAM,CAAC,EAAI,EAAG,IAInC,OAAO,EACF,GAAA,MAAA,CACH,EAAG,MAAM,AA1FA,EA0FO,EAAiB,MAAM,EAAE,IAAI,CAAC,IAElD,CAEA,SAAS,IACP,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EACE,CAAK,CAAC,EAAS,CAAG,EAAU,EAC9B,EACF,CAEA,SAAS,IACP,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EAEE,IAAM,EAAY,EADG,EAAG,GAAK,OAAO,GAGpC,CAAA,CAAK,CAAC,EAAS,CAAG,EAAU,OAAO,EACrC,EACF,CAcA,SAAS,IACP,IAzFA,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAa,CAA1B,EACE,IAAM,EAAa,CAAS,CAAC,EAAS,CAAC,QAAQ,CAAC,EAAU,AAE1D,CAAA,EAAW,SAAS,CAAG,GAAe,GAEtC,EAAW,SAAS,CAAG,aAEhB,MAAA,CAF6B,EAC/B,gBAA2B,MAAA,CAAZ,GAChB,IAmHK,OAjHA,IAkHX,EAAc,SAAS,CAAC,MAAM,CAAC,UAC/B,SAAS,mBAAmB,CAAC,UAAW,GAlHxC,EACF,GAEA,EAAU,SAAS,CAAG,EAKA,EAAM,IAAI,CAAC,SAAC,CAAlC,EAA0C,OAAA,EAAI,QAAQ,CAAC,E,IAEhC,AAMzB,WACE,IAAK,IAAI,EAAM,EAAG,EA7DP,EA6DmB,IAC5B,IAAK,IAAI,EAAO,EAAG,EAAO,EAAU,IAClC,GAAI,CAAK,CAAC,EAAI,CAAC,EAAK,GAAK,CAAK,CAAC,EAAI,CAAC,EAAO,EAAE,EACxC,CAAK,CAAC,EAAK,CAAC,EAAI,GAAK,CAAK,CAAC,EAAO,EAAE,CAAC,EAAI,CAC5C,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,MAhBI,SAAS,mBAAmB,CAAC,UAAW,GACxC,EAAY,SAAS,CAAC,MAAM,CAAC,UAoEjC,CAEA,SAAS,EAAa,CAAO,EAC3B,IAAM,EAAgB,KAAK,SAAS,CAAC,GAErC,OAAQ,EAAQ,GAAG,EACjB,IAAK,YACH,IACA,KAEF,KAAK,aACH,IACA,KAEF,KAAK,UA5BP,EAAQ,EAAc,GACtB,IACA,EAAQ,EAAc,GA4BlB,KAEF,KAAK,YA1BP,EAAQ,EAAc,GACtB,IACA,EAAQ,EAAc,GA0BlB,KAEF,SACE,MACJ,CAEI,KAAK,SAAS,CAAC,KAAW,GAC5B,GAEJ,CASA,EAAY,gBAAgB,CAAC,QAAS,WACpC,SAAS,gBAAgB,CAAC,UAAW,GACrC,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAY,SAAS,CAAC,GAAG,CAAC,UAEtB,AAA0B,UAA1B,EAAY,SAAS,EACvB,EAAY,SAAS,CAAG,UACxB,EAAY,SAAS,CAAC,OAAO,CAAC,QAAS,WACvC,EAAa,MAAM,CAAG,CAAA,IAEtB,EAAQ,IACR,EAAQ,GAGV,IACA,GACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startMessage = document.querySelector(\".message-start\");\nvar winnerMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar gameScore = document.querySelector(\".game-score\");\nvar buttonStart = document.querySelector(\".button\");\nvar fieldRows = Array.from(document.querySelectorAll(\".field-row\"));\nvar size = 4;\nvar score = 0;\nvar field = clearField();\nfunction clearField() {\n    return Array.from({\n        length: size\n    }, function() {\n        return Array(size).fill(0);\n    });\n}\nfunction createRandomNumb() {\n    var emptyCells = [];\n    for(var row = 0; row < size; row++){\n        for(var cell = 0; cell < size; cell++)if (field[row][cell] === 0) emptyCells.push({\n            row: row,\n            cell: cell\n        });\n    }\n    if (emptyCells.length > 0) {\n        var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        var value = Math.random() > 0.1 ? 2 : 4;\n        field[randomCell.row][randomCell.cell] = value;\n    }\n}\nfunction changedGameField() {\n    field.forEach(function(row, rowIndex) {\n        row.forEach(function(currentCell, cellIndex) {\n            var renderCell = fieldRows[rowIndex].children[cellIndex];\n            renderCell.innerText = currentCell || \"\";\n            renderCell.className = \"field-cell\".concat(currentCell ? \" field-cell--\".concat(currentCell) : \"\");\n            checkWin(currentCell);\n        });\n    });\n    gameScore.innerText = score;\n    gameOver();\n}\nfunction gameOver() {\n    var hasEmptyCells = field.some(function(row) {\n        return row.includes(0);\n    });\n    if (!hasEmptyCells && !mergeCells()) {\n        document.removeEventListener(\"keydown\", pushedArrows);\n        loseMessage.classList.remove(\"hidden\");\n    }\n}\nfunction mergeCells() {\n    for(var row = 0; row < size; row++)for(var cell = 0; cell < size - 1; cell++){\n        if (field[row][cell] === field[row][cell + 1] || field[cell][row] === field[cell + 1][row]) return true;\n    }\n    return false;\n}\nfunction transposition(arr) {\n    return arr[0].map(function(_, i) {\n        return arr.map(function(row) {\n            return row[i];\n        });\n    });\n}\nfunction joinCells(row) {\n    var withoutZeroCells = row.filter(function(value) {\n        return value !== 0;\n    });\n    for(var i = 0; i < withoutZeroCells.length - 1; i++)if (withoutZeroCells[i] === withoutZeroCells[i + 1]) {\n        withoutZeroCells[i] *= 2;\n        score += withoutZeroCells[i];\n        withoutZeroCells.splice(i + 1, 1);\n    }\n    return _to_consumable_array(withoutZeroCells).concat(_to_consumable_array(Array(size - withoutZeroCells.length).fill(0)));\n}\nfunction arrowLeft() {\n    field.forEach(function(row, rowIndex) {\n        field[rowIndex] = joinCells(row);\n    });\n}\nfunction arrowRight() {\n    field.forEach(function(row, rowIndex) {\n        var reversedRow = _to_consumable_array(row).reverse();\n        var joinedRow = joinCells(reversedRow);\n        field[rowIndex] = joinedRow.reverse();\n    });\n}\nfunction arrowUp() {\n    field = transposition(field);\n    arrowLeft();\n    field = transposition(field);\n}\nfunction arrowDown() {\n    field = transposition(field);\n    arrowRight();\n    field = transposition(field);\n}\nfunction fillAllCels() {\n    createRandomNumb();\n    changedGameField();\n}\nfunction pushedArrows(element) {\n    var originalField = JSON.stringify(field);\n    switch(element.key){\n        case \"ArrowLeft\":\n            arrowLeft();\n            break;\n        case \"ArrowRight\":\n            arrowRight();\n            break;\n        case \"ArrowUp\":\n            arrowUp();\n            break;\n        case \"ArrowDown\":\n            arrowDown();\n            break;\n        default:\n            return;\n    }\n    if (JSON.stringify(field) !== originalField) fillAllCels();\n}\nfunction checkWin(parm) {\n    if (parm === 2048) {\n        winnerMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", pushedArrows);\n    }\n}\nbuttonStart.addEventListener(\"click\", function() {\n    document.addEventListener(\"keydown\", pushedArrows);\n    winnerMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    if (buttonStart.innerText === \"Start\") {\n        buttonStart.innerText = \"Restart\";\n        buttonStart.classList.replace(\"start\", \"restart\");\n        startMessage.hidden = true;\n    } else {\n        field = clearField();\n        score = 0;\n    }\n    createRandomNumb();\n    fillAllCels();\n});\n\n//# sourceMappingURL=index.8b7ebd4f.js.map\n","'use strict';\n\nconst startMessage = document.querySelector('.message-start');\nconst winnerMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.button');\nconst fieldRows = Array.from(document.querySelectorAll('.field-row'));\n\nconst size = 4;\nlet score = 0;\nlet field = clearField();\n\nfunction clearField() {\n  return Array.from({ length: size },\n    () => Array(size).fill(0));\n}\n\nfunction createRandomNumb() {\n  const emptyCells = [];\n\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size; cell++) {\n      if (field[row][cell] === 0) {\n        emptyCells.push({\n          row, cell,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    const value = Math.random() > 0.1 ? 2 : 4;\n\n    field[randomCell.row][randomCell.cell] = value;\n  }\n}\n\nfunction changedGameField() {\n  field.forEach((row, rowIndex) => {\n    row.forEach((currentCell, cellIndex) => {\n      const renderCell = fieldRows[rowIndex].children[cellIndex];\n\n      renderCell.innerText = currentCell || '';\n\n      renderCell.className = `field-cell${currentCell\n        ? ` field-cell--${currentCell}`\n        : ''}`;\n\n      checkWin(currentCell);\n    });\n  });\n\n  gameScore.innerText = score;\n  gameOver();\n}\n\nfunction gameOver() {\n  const hasEmptyCells = field.some((row) => row.includes(0));\n\n  if (!hasEmptyCells && !mergeCells()) {\n    document.removeEventListener('keydown', pushedArrows);\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction mergeCells() {\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size - 1; cell++) {\n      if (field[row][cell] === field[row][cell + 1]\n        || field[cell][row] === field[cell + 1][row]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction transposition(arr) {\n  return arr[0].map((_, i) => arr.map(row => row[i]));\n}\n\nfunction joinCells(row) {\n  const withoutZeroCells = row.filter(value => value !== 0);\n\n  for (let i = 0; i < withoutZeroCells.length - 1; i++) {\n    if (withoutZeroCells[i] === withoutZeroCells[i + 1]) {\n      withoutZeroCells[i] *= 2;\n      score += withoutZeroCells[i];\n      withoutZeroCells.splice(i + 1, 1);\n    }\n  }\n\n  return [\n    ...withoutZeroCells,\n    ...Array(size - withoutZeroCells.length).fill(0),\n  ];\n}\n\nfunction arrowLeft() {\n  field.forEach((row, rowIndex) => {\n    field[rowIndex] = joinCells(row);\n  });\n}\n\nfunction arrowRight() {\n  field.forEach((row, rowIndex) => {\n    const reversedRow = [...row].reverse();\n    const joinedRow = joinCells(reversedRow);\n\n    field[rowIndex] = joinedRow.reverse();\n  });\n}\n\nfunction arrowUp() {\n  field = transposition(field);\n  arrowLeft();\n  field = transposition(field);\n}\n\nfunction arrowDown() {\n  field = transposition(field);\n  arrowRight();\n  field = transposition(field);\n}\n\nfunction fillAllCels() {\n  createRandomNumb();\n  changedGameField();\n}\n\nfunction pushedArrows(element) {\n  const originalField = JSON.stringify(field);\n\n  switch (element.key) {\n    case 'ArrowLeft':\n      arrowLeft();\n      break;\n\n    case 'ArrowRight':\n      arrowRight();\n      break;\n\n    case 'ArrowUp':\n      arrowUp();\n      break;\n\n    case 'ArrowDown':\n      arrowDown();\n      break;\n\n    default:\n      return;\n  }\n\n  if (JSON.stringify(field) !== originalField) {\n    fillAllCels();\n  }\n}\n\nfunction checkWin(parm) {\n  if (parm === 2048) {\n    winnerMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', pushedArrows);\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  document.addEventListener('keydown', pushedArrows);\n  winnerMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  if (buttonStart.innerText === 'Start') {\n    buttonStart.innerText = 'Restart';\n    buttonStart.classList.replace('start', 'restart');\n    startMessage.hidden = true;\n  } else {\n    field = clearField();\n    score = 0;\n  }\n\n  createRandomNumb();\n  fillAllCels();\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","startMessage","document","querySelector","winnerMessage","loseMessage","gameScore","buttonStart","fieldRows","querySelectorAll","score","field","clearField","fill","createRandomNumb","emptyCells","row","cell","push","randomCell","Math","floor","random","value","transposition","map","_","joinCells","withoutZeroCells","filter","splice","concat","size","arrowLeft","forEach","rowIndex","arrowRight","joinedRow","reverse","fillAllCels","currentCell","cellIndex","renderCell","children","innerText","className","classList","remove","removeEventListener","pushedArrows","some","includes","mergeCells","element","originalField","JSON","stringify","key","addEventListener","add","replace","hidden"],"version":3,"file":"index.8b7ebd4f.js.map"}